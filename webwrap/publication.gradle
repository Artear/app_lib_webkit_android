apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka-android'

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

if (project.hasProperty("kotlin")) { //Kotlin libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc, dependsOn: dokka) {

    }
} else if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc, dependsOn: dokka) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Get the artifacts
artifacts {
    archives javadocJar
    archives sourcesJar
}

// Create the pom configuration with maven-publish plugin.
def pomConfig = {
    licenses {
        license {
            name licenseName
            url licenseUrl
            distribution "repo"
        }
    }
    developers {
        developer {
            id developerId
            name developerName
        }
    }
    scm {
        connection gitUrl
        developerConnection gitUrl
        url siteUrl
    }
}

// Create the publication with the pom configuration:
publishing {
    publications {
        Bintray(MavenPublication) {
            artifact sourcesJar
            artifact javadocJar
            artifact("$buildDir/outputs/aar/${project.getName()}-${version}-release.aar")
            groupId publishedGroupId
            artifactId artifact
            version this.version
            pom.withXml {
                def root = asNode()
                root.appendNode('name', libraryName)
                root.appendNode('description', libraryDescription)
                root.appendNode('url', siteUrl)
                root.children().last() + pomConfig
                def dependenciesNode = root.appendNode('dependencies')
                getDependencies(configurations.compile, dependenciesNode)
                getDependencies(configurations.api, dependenciesNode)
                getDependencies(configurations.implementation, dependenciesNode)
                if (project.hasProperty("android")) {
                    getDependencies(configurations.releaseImplementation, dependenciesNode)
                    getDependencies(configurations.debugImplementation, dependenciesNode)
                    getDependencies(configurations.androidTestAnnotationProcessor, dependenciesNode)
                    getDependencies(configurations.annotationProcessor, dependenciesNode)
                }
            }
        }
    }
}

def getDependencies(config, dependenciesNode) {
    config.allDependencies.each {
        if (it.group != null && it.name != null) {
            def dependencyNode = dependenciesNode.appendNode('dependency')
            dependencyNode.appendNode('groupId', it.group)
            dependencyNode.appendNode('artifactId', it.name)
            dependencyNode.appendNode('version', it.version)
            printAdd(config, it)
            def exclusionsNode = dependencyNode.appendNode('exclusions')
            if (it.excludeRules.size() > 0) {
                printAddExclusions(config, it)
                it.excludeRules.each { rule ->
                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                    exclusionNode.appendNode('groupId', rule.group)
                    if (rule.module != null) {
                        exclusionNode.appendNode('artifactId', rule.module)
                    }
                }
            } else {
                dependencyNode.remove(exclusionsNode)
            }
        }
        println "Dependencies size: " + dependenciesNode.children().size()
    }
}

def printAdd(config, it) {
    println "Added dependency: '" + config.name + " " + it.group + ":" + it.name + ":" + it.version + "'"
}

def printAddExclusions(config, it) {
    println "Added exclusions for: '" + config.name + " " + it.group + ":" + it.name + ":" + it.version + "'"
}

